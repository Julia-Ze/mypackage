% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setThreshold.R
\name{setThreshold}
\alias{setThreshold}
\title{Set an extreme value threshold}
\usage{
setThreshold(
  formula,
  data,
  tau = 0.9,
  mstop = 1000,
  replace = c("pb", "pbo", "pbp", "pbc", "cy", "pbm", "pbz", "ps", "pvc", "pvp"),
  ...
)
}
\arguments{
\item{formula}{a formula object, with the response on the left of an ~ operator, and the terms, separated by \eqn{+}{+} operators, on the right.
  Nonparametric smoothing terms are indicated by \code{pb()} for penalised beta splines, \code{cs} for smoothing splines, \code{lo} for \code{loess} smooth terms and \code{random} or \code{ra}
  for random terms, e.g. \code{y~cs(x,df=5)+x1+x2*x3}.  Additional smoothers can be added by creating the appropriate interface.
  Interactions with nonparametric smooth terms are not fully supported, but will not produce errors;
  they will simply produce the usual parametric interaction 
  }

\item{data}{a data frame containing the variables occurring in the formula, e.g. \code{data=aids}. If this is missing, the variables should be on the search list.}

\item{tau}{A numeric scalar \eqn{\tau} between 0 and 1 passed as the
argument \code{tau} to the \code{\link[mboost:Family]{Quantreg}}. The threshold is set
at an estimate of the \eqn{100\tau\%} conditional quantile of the response
given the values of the covariates.}

\item{mstop}{The argument \code{mstop} to \code{\link[mboost:control]{mboost::boost_control}}.}

\item{replace}{A character vector. All instances of \code{pb()}, for example, in
\code{formula} will be replaced by \code{bbs()} for use in setting the threshold
using \code{\link[mboost:gamboost]{mboost::mboost}}. The default value of \code{replace}
contains the P-spline fitting functions in \code{\link[gamlss:ps]{gamlss::ps}}.

The special cases of the cyclic spline functions \code{pbc(.)} and \code{cy(.)} are
replaced by \code{bbs(., cyclic = TRUE)} and \code{bbs(., cyclic = TRUE)}
respectively.}

\item{...}{Additional arguments to be passed to \code{\link[mboost:control]{mboost::boost_control}}.}
}
\value{
An object of class \code{mboost} returned by \code{\link[mboost:gamboost]{mboost::mboost}}.

To obtain a vector of the value of the threshold use \code{fitted(object)}, where
\code{object} is the name of the returned object.
}
\description{
Performs flexible quantile regression to set an extreme value threshold as
a user-supplied estimated quantile level of the response conditional on
the values of covariates.
}
\details{
Uses the \code{QuantReg} family of the \code{\link[mboost:gamboost]{mboost::mboost}} function,
which fits additive models using gradient boosting.
}
\examples{
## A toy example

Dat <- NULL
Dat$x <- rep(1:25, 20)
set.seed(1)
Dat$y <- SSlogis(Dat$x, 10, 12, 2) * rnorm(500, 1, 0.1)
# Non-cyclic spline function
fit <- setThreshold(y ~ pb(x), data = Dat)
plot(fit)
# Cyclic spline function
fit <- setThreshold(y ~ pbc(x), data = Dat)
plot(fit)

## The northern North Sea significant wave height data

# NAO only
fit <- setThreshold(Hs ~ pb(NAO), data = waves)
plot(fit)
# The threshold superimposed on the data
threshold <- fitted(fit)
plot(waves$NAO, waves$Hs)
points(waves$NAO, threshold, col = "red", pch = 16)

# Season only
fit <- setThreshold(Hs ~ pbc(season), data = waves)
threshold <- fitted(fit)
plot(waves$season, waves$Hs)
points(waves$season, threshold, col = "red", pch = 16)

# Direction only
fit <- setThreshold(Hs ~ pbc(direction), data = waves)
threshold <- fitted(fit)
plot(waves$direction, waves$Hs)
points(waves$direction, threshold, col = "red", pch = 16)

# Season and direction
fit <- setThreshold(Hs ~ pbc(season) + pbc(direction), data = waves)
par(mfrow = c(2, 1))
plot(fit)

# NAO, season and direction
fit <- setThreshold(Hs ~ pb(NAO) + pbc(season) + pbc(direction), data = waves)
par(mfrow = c(2, 2))
plot(fit)

}
